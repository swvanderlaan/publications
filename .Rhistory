install.packages.auto("AnnotationDbi")
install.packages.auto("pheatmap")
install.packages.auto("qqman")
install.packages.auto("forestplot")
install.packages.auto("meta")
install.packages.auto("bacon")
library(devtools)
install_github("molepi/DNAmArray", force = FALSE)
library(DNAmArray)
# install_github("molepi/omicsPrint", force = FALSE)
# library(omicsPrint)
# install_github("bbmri-nl/BBMRIomics", subdir = "BBMRIomics", force = FALSE)
# library(BBMRIomics)
manhattan.uithof <- function(x, chr = "CHR", bp = "BP", p = "P", snp = "SNP",
col = c("gray10", "gray60"), chrlabs = NULL,
suggestiveline = -log10(1e-05),  genomewideline = -log10(5e-08),
highlight = NULL, logp = TRUE, annotatePval = NULL, annotateTop = TRUE, ...) {
CHR = BP = P = index = NULL
if (!(chr %in% names(x)))
stop(paste("Column", chr, "not found!"))
if (!(bp %in% names(x)))
stop(paste("Column", bp, "not found!"))
if (!(p %in% names(x)))
stop(paste("Column", p, "not found!"))
if (!(snp %in% names(x)))
warning(paste("No SNP/CpG column found. OK unless you're trying to highlight."))
if (!is.numeric(x[[chr]]))
stop(paste(chr, "column should be numeric. Do you have 'X', 'Y', 'MT', etc? If so change to numbers and try again."))
if (!is.numeric(x[[bp]]))
stop(paste(bp, "column should be numeric."))
if (!is.numeric(x[[p]]))
stop(paste(p, "column should be numeric."))
d = data.frame(CHR = x[[chr]], BP = x[[bp]], P = x[[p]])
if (!is.null(x[[snp]]))
d = transform(d, SNP = x[[snp]])
d <- subset(d, (is.numeric(CHR) & is.numeric(BP) & is.numeric(P)))
d <- d[order(d$CHR, d$BP), ]
if (logp) {
d$logp <- -log10(d$P)
}
else {
d$logp <- d$P
}
d$pos = NA
d$index = NA
ind = 0
for (i in unique(d$CHR)) {
ind = ind + 1
d[d$CHR == i, ]$index = ind
}
nchr = length(unique(d$CHR))
if (nchr == 1) {
d$pos = d$BP
ticks = floor(length(d$pos))/2 + 1
xlabel = paste("Chromosome", unique(d$CHR), "position")
labs = ticks
}
else {
lastbase = 0
ticks = NULL
for (i in unique(d$index)) {
if (i == 1) {
d[d$index == i, ]$pos = d[d$index == i, ]$BP
}
else {
lastbase = lastbase + tail(subset(d, index ==
i - 1)$BP, 1)
d[d$index == i, ]$pos = d[d$index == i, ]$BP +
lastbase
}
ticks = c(ticks, (min(d[d$index == i, ]$pos) + max(d[d$index ==
i, ]$pos))/2 + 1)
}
xlabel = "Chromosome"
labs <- unique(d$CHR)
}
xmax = ceiling(max(d$pos) * 1.03)
xmin = floor(max(d$pos) * -0.03)
def_args <- list(xaxt = "n", bty = "n", xaxs = "i", yaxs = "i",
las = 1, pch = 20, xlim = c(xmin, xmax), ylim = c(0,
ceiling(max(d$logp))), xlab = xlabel, ylab = expression(-log[10](italic(p))))
dotargs <- list(...)
do.call("plot", c(NA, dotargs, def_args[!names(def_args) %in%
names(dotargs)]))
if (!is.null(chrlabs)) {
if (is.character(chrlabs)) {
if (length(chrlabs) == length(labs)) {
labs <- chrlabs
}
else {
warning("You're trying to specify chromosome labels but the number of labels != number of chromosomes.")
}
}
else {
warning("If you're trying to specify chromosome labels, chrlabs must be a character vector")
}
}
if (nchr == 1) {
axis(1, ...)
}
else {
axis(1, at = ticks, labels = labs, ...)
}
col = rep(col, max(d$CHR))
if (nchr == 1) {
with(d, points(pos, logp, pch = 20, col = col[1], ...))
}
else {
icol = 1
for (i in unique(d$index)) {
with(d[d$index == unique(d$index)[i], ], points(pos,
logp, col = col[icol], pch = 20, ...))
icol = icol + 1
}
}
if (suggestiveline)
abline(h = suggestiveline, col = "#1290D9", lty = 2, lwd = 2)
if (genomewideline)
abline(h = genomewideline, col = "#E55738", lty = 2, lwd = 2)
if (!is.null(highlight)) {
if (any(!(highlight %in% d$SNP)))
warning("You're trying to highlight SNPs/CpGs that don't exist in your results.")
d.highlight = d[which(d$SNP %in% highlight), ]
with(d.highlight, points(pos, logp, col = "#595A5C", pch = 20,
...))
}
if (!is.null(annotatePval)) {
topHits = subset(d, P <= annotatePval)
par(xpd = TRUE)
if (annotateTop == FALSE) {
with(subset(d, P <= annotatePval), textxy(pos, -log10(P),
offset = 0.625, labs = topHits$SNP, cex = 1.25),
...)
}
else {
topHits <- topHits[order(topHits$P), ]
topSNPs <- NULL
for (i in unique(topHits$CHR)) {
chrSNPs <- topHits[topHits$CHR == i, ]
topSNPs <- rbind(topSNPs, chrSNPs[1, ])
}
library("calibrate")
textxy(topSNPs$pos, -log10(topSNPs$P), offset = 0.625,
labs = topSNPs$SNP, cex = 1.25, ...)
}
}
par(xpd = FALSE)
}
Today = format(as.Date(as.POSIXlt(Sys.time())), "%Y%m%d")
Today.Report = format(as.Date(as.POSIXlt(Sys.time())), "%A, %B %d, %Y")
###	UtrechtScienceParkColoursScheme
###
###WebsitetoconvertHEXtoRGB:http://hex.colorrrs.com.
###Forsomefunctionsyoushoulddividethesenumbersby255.
###
###	No.	Color			HEX		RGB						CHR		MAF/INFO
###---------------------------------------------------------------------------------------
###	1	yellow			#FBB820(251,184,32)				=>	1		or 1.0>INFO
###	2	gold			#F59D10(245,157,16)				=>	2
###	3	salmon			#E55738(229,87,56)				=>	3		or 0.05<MAF<0.2 or 0.4<INFO<0.6
###	4	darkpink		#DB003F((219,0,63)				=>	4
###	5	lightpink		#E35493(227,84,147)				=>	5		or 0.8<INFO<1.0
###	6	pink			#D5267B(213,38,123)				=>	6
###	7	hardpink		#CC0071(204,0,113)				=>	7
###	8	lightpurple		#A8448A(168,68,138)				=>	8
###	9	purple			#9A3480(154,52,128)				=>	9
###	10	lavendel		#8D5B9A(141,91,154)				=>	10
###	11	bluepurple		#705296(112,82,150)				=>	11
###	12	purpleblue		#686AA9(104,106,169)			=>	12
###	13	lightpurpleblue	#6173AD(97,115,173/101,120,180)	=>	13
###	14	seablue			#4C81BF(76,129,191)				=>	14
###	15	skyblue			#2F8BC9(47,139,201)				=>	15
###	16	azurblue		#1290D9(18,144,217)				=>	16		or 0.01<MAF<0.05 or 0.2<INFO<0.4
###	17	lightazurblue	#1396D8(19,150,216)				=>	17
###	18	greenblue		#15A6C1(21,166,193)				=>	18
###	19	seaweedgreen	#5EB17F(94,177,127)				=>	19
###	20	yellowgreen		#86B833(134,184,51)				=>	20
###	21	lightmossgreen	#C5D220(197,210,32)				=>	21
###	22	mossgreen		#9FC228(159,194,40)				=>	22		or MAF>0.20 or 0.6<INFO<0.8
###	23	lightgreen		#78B113(120,177,19)				=>	23/X
###	24	green			#49A01D(73,160,29)				=>	24/Y
###	25	grey			#595A5C(89,90,92)				=>	25/XY	or MAF<0.01 or 0.0<INFO<0.2
###	26	lightgrey		#A2A3A4	(162,163,164)			=>	26/MT
###
###	ADDITIONAL COLORS
###	27	midgrey			#D7D8D7
###	28	verylightgrey	#ECECEC"
###	29	white			#FFFFFF
###	30	black			#000000
###----------------------------------------------------------------------------------------------
uithof_color = c("#FBB820","#F59D10","#E55738","#DB003F","#E35493","#D5267B",
"#CC0071","#A8448A","#9A3480","#8D5B9A","#705296","#686AA9",
"#6173AD","#4C81BF","#2F8BC9","#1290D9","#1396D8","#15A6C1",
"#5EB17F","#86B833","#C5D220","#9FC228","#78B113","#49A01D",
"#595A5C","#A2A3A4", "#D7D8D7", "#ECECEC", "#FFFFFF", "#000000")
uithof_color_legend = c("#FBB820", "#F59D10", "#E55738", "#DB003F", "#E35493",
"#D5267B", "#CC0071", "#A8448A", "#9A3480", "#8D5B9A",
"#705296", "#686AA9", "#6173AD", "#4C81BF", "#2F8BC9",
"#1290D9", "#1396D8", "#15A6C1", "#5EB17F", "#86B833",
"#C5D220", "#9FC228", "#78B113", "#49A01D", "#595A5C",
"#A2A3A4", "#D7D8D7", "#ECECEC", "#FFFFFF", "#000000")
### ----------------------------------------------------------------------------
sessionInfo()
### Operating System Version
### Mac Pro
# ROOT_loc = "/Volumes/EliteProQx2Media"
### MacBook
ROOT_loc = "/Users/swvanderlaan"
PROJECTDATASET = "AEMS450KMETA"
PROJECTNAME = "metasex"
KEYWORD = "SEX"
SUBPROJECTNAME1 = "AEMS450K1"
SUBPROJECTNAME2 = "AEMS450K2"
EWAS_trait = "Sample_Sex_T_E2_Ratio" # Phenotype
AEDB = paste0(ROOT_loc, "/iCloud/Genomics/AE-AAA_GS_DBs")
INP_AE_loc = paste0(ROOT_loc, "/PLINK/_AE_Originals")
INP_AEMS450K1_loc = paste0(INP_AE_loc, "/AEMS450K1")
INP_AEMS450K2_loc = paste0(INP_AE_loc, "/AEMS450K2")
EPIGENETICS_loc = paste0(ROOT_loc, "/PLINK/analyses/epigenetics")
RES_AEMS450K1_loc = paste0(EPIGENETICS_loc, "/AEMS450K1")
RES_AEMS450K2_loc = paste0(EPIGENETICS_loc, "/AEMS450K2")
ifelse(!dir.exists(file.path(EPIGENETICS_loc, "/",PROJECTDATASET)),
dir.create(file.path(EPIGENETICS_loc, "/",PROJECTDATASET)),
FALSE)
INP_loc = paste0(EPIGENETICS_loc, "/",PROJECTDATASET)
ifelse(!dir.exists(file.path(INP_loc, "/",PROJECTNAME)),
dir.create(file.path(INP_loc, "/",PROJECTNAME)),
FALSE)
ANALYSIS_loc = paste0(INP_loc,"/",PROJECTNAME)
ifelse(!dir.exists(file.path(ANALYSIS_loc, "/PLOTS")),
dir.create(file.path(ANALYSIS_loc, "/PLOTS")),
FALSE)
PLOT_loc = paste0(ANALYSIS_loc,"/PLOTS")
ifelse(!dir.exists(file.path(PLOT_loc, "/COX")),
dir.create(file.path(PLOT_loc, "/COX")),
FALSE)
COX_loc = paste0(PLOT_loc,"/COX")
ifelse(!dir.exists(file.path(PLOT_loc, "/QC")),
dir.create(file.path(PLOT_loc, "/QC")),
FALSE)
QC_loc = paste0(PLOT_loc,"/QC")
ifelse(!dir.exists(file.path(ANALYSIS_loc, "/OUTPUT")),
dir.create(file.path(ANALYSIS_loc, "/OUTPUT")),
FALSE)
OUT_loc = paste0(ANALYSIS_loc, "/OUTPUT")
setwd(INP_loc)
list.files()
load(paste0(INP_AEMS450K1_loc,"/20180625.aems450k1.BvaluesQCIMPSE.plaque.RData"))
load(paste0(INP_AEMS450K1_loc,"/20180625.aems450k1.MvaluesQCIMPSE.plaque.RData"))
aems450k1.MvaluesQCIMPplaqueSE=MvaluesQCIMPplaqueSE
aems450k1.BvaluesQCIMPplaqueSE=BvaluesQCIMPplaqueSE
rm(MvaluesQCIMPplaqueSE, BvaluesQCIMPplaqueSE)
load(paste0(INP_AEMS450K2_loc,"/20180625.aems450k2.BvaluesQCIMPSE.plaque.RData"))
load(paste0(INP_AEMS450K2_loc,"/20180625.aems450k2.MvaluesQCIMPSE.plaque.RData"))
AEDB_Q1_20180223 <- read.xlsx(paste0(AEDB,"/2018-1NEW_AtheroExpressDatabase_ScientificAE_230218_IC.xlsx"), sheet = "OrValues", colNames = TRUE, detectDates = TRUE,
na.strings = c("NA", "No data/missing", "no issue", "Missing",
"missing", "No data available", "no data available",
"below detection limit", "too little material",
"-999", "-888", "-777", "-666"))
AEDB_Q1_20180223_sex <- subset(AEDB_Q1_20180223, Gender != "NA",
select = c("STUDY_NUMBER", "UPID",
"Testosterone", "Estradiol", "SHBG",
"Gender"))
dim(AEDB_Q1_20180223_sex)
AEDB_Q1_20180223_sex[1:5,1:5]
AEDB_Q1_20180223_sex$T_E2 <- AEDB_Q1_20180223_sex$Testosterone/AEDB_Q1_20180223_sex$Estradiol
colnames(AEDB_Q1_20180223_sex)[colnames(AEDB_Q1_20180223_sex)=="Gender"] <- "Sex"
summary(AEDB_Q1_20180223_sex)
library(plyr)
T_mu <- ddply(AEDB_Q1_20180223_sex, "Sex", summarise, grp.mean = mean(Testosterone, na.rm = TRUE))
E2_mu <- ddply(AEDB_Q1_20180223_sex, "Sex", summarise, grp.mean = mean(Estradiol, na.rm = TRUE))
S_mu <- ddply(AEDB_Q1_20180223_sex, "Sex", summarise, grp.mean = mean(SHBG, na.rm = TRUE))
TE2_mu <- ddply(AEDB_Q1_20180223_sex, "Sex", summarise, grp.mean = mean(T_E2, na.rm = TRUE))
library(ggplot2)
p_testosterone <- ggplot(AEDB_Q1_20180223_sex, aes(x = Testosterone,
fill = Sex,
color = Sex)) +
geom_histogram(position = "identity", alpha = 0.5) +
geom_vline(data = T_mu, aes(xintercept = grp.mean, color = Sex),
linetype = "dashed") +
labs(title = "Testosterone distributions",x = "Testosterone [nmol/L]", y = "Count") +
scale_fill_manual(values = c("#D5267B", "#1290D9", "#595A5C")) +
theme_minimal() + theme(legend.position = "top")
p_testosterone
p_estradiol <- ggplot(AEDB_Q1_20180223_sex, aes(x = Estradiol,
fill = Sex,
color = Sex)) +
geom_histogram(position = "identity", alpha = 0.5) +
geom_vline(data = E2_mu, aes(xintercept = grp.mean, color = Sex),
linetype = "dashed") +
labs(title = "Estradiol distributions",x = "Estradiol [pmol/L]", y = "Count") +
scale_fill_manual(values = c("#D5267B", "#1290D9", "#595A5C")) +
theme_minimal() + theme(legend.position = "top")
p_estradiol
p_shbg <- ggplot(AEDB_Q1_20180223_sex, aes(x = SHBG,
fill = Sex,
color = Sex)) +
geom_histogram(position = "identity", alpha = 0.5) +
geom_vline(data = S_mu, aes(xintercept = grp.mean, color = Sex),
linetype = "dashed") +
labs(title = "SHBG distributions",x = "SHBG [nmol/L]", y = "Count") +
scale_fill_manual(values = c("#D5267B", "#1290D9", "#595A5C")) +
theme_minimal() + theme(legend.position = "top")
p_shbg
p_t_e2 <- ggplot(AEDB_Q1_20180223_sex, aes(x = T_E2,
fill = Sex,
color = Sex)) +
geom_histogram(position = "identity", alpha = 0.5) +
geom_vline(data = TE2_mu, aes(xintercept = grp.mean, color = Sex),
linetype = "dashed") +
labs(title = "T/E2 distributions",x = "T/E2 ratio", y = "Count") +
scale_fill_manual(values = c("#D5267B", "#1290D9", "#595A5C")) +
theme_minimal() + theme(legend.position = "top")
p_t_e2
library(gridExtra)
pdf(paste0(QC_loc,"/",Today,".aems450k1.",EWAS_trait,".Hormones.pdf"),
width = 12, height = 8, onefile = TRUE)
grid.arrange(p_testosterone, p_estradiol, p_shbg, p_t_e2)
dev.off()
dim(aems450k1.MvaluesQCIMPplaqueSE$STUDY_NUMBER)
colData <- merge(colData(aems450k1.MvaluesQCIMPplaqueSE), AEDB_Q1_20180223_sex,
by.x = "STUDY_NUMBER", by.y = "STUDY_NUMBER", all.x = TRUE)
dim(colData)
aems450k1.MvaluesQCplaqueUpdate <- SummarizedExperiment(assays = assays(aems450k1.MvaluesQCIMPplaqueSE),
rowRanges = rowRanges(aems450k1.MvaluesQCIMPplaqueSE),
colData = colData)
aems450k1.MvaluesQCIMPplaqueSE=aems450k1.MvaluesQCplaqueUpdate
dim(aems450k1.MvaluesQCIMPplaqueSE)
aems450k1.MvaluesQCIMPplaqueSE
dim(aems450k2.MvaluesQCIMPplaqueSE$STUDY_NUMBER)
colData <- merge(colData(aems450k2.MvaluesQCIMPplaqueSE), AEDB_Q1_20180223_sex,
by.x = "STUDY_NUMBER", by.y = "STUDY_NUMBER", all.x = TRUE)
dim(colData)
aems450k2.MvaluesQCplaqueUpdate <- SummarizedExperiment(assays = assays(aems450k2.MvaluesQCIMPplaqueSE),
rowRanges = rowRanges(aems450k2.MvaluesQCIMPplaqueSE),
colData = colData)
aems450k2.MvaluesQCIMPplaqueSE=aems450k2.MvaluesQCplaqueUpdate
dim(aems450k2.MvaluesQCIMPplaqueSE)
aems450k2.MvaluesQCIMPplaqueSE
rm(colData, aems450k1.MvaluesQCplaqueUpdate, aems450k2.MvaluesQCplaqueUpdate)
pdf(paste0(QC_loc,"/",Today,".aems450k1.",EWAS_trait,".plaque.MethylationDensity.pdf"),
width = 12, height = 8, onefile = TRUE)
par(mfrow = c(1,2), oma = c(0, 0, 2, 0))
densityPlot(assays(aems450k1.BvaluesQCIMPplaqueSE)$data, sampGroups = aems450k1.BvaluesQCIMPplaqueSE$Sample_Sex, main = "Beta-values",
legend = FALSE,
xlab = "Beta-values",
pal = c("#DB003F", "#1290D9"),
bty = "n")
legend("topright", legend = levels(factor(aems450k1.BvaluesQCIMPplaqueSE$Sample_Sex)),
text.col = c("#DB003F", "#1290D9"),
lty = 1, lwd = 1, col = c("#DB003F", "#1290D9"),
bty = "n")
densityPlot(assays(aems450k1.MvaluesQCIMPplaqueSE)$data, sampGroups = aems450k1.MvaluesQCIMPplaqueSE$Sample_Sex, main = "M-values",
legend = FALSE,
xlab = "M-values",
pal = c("#DB003F", "#1290D9"),
bty = "n")
legend("topright", legend = levels(factor(aems450k1.MvaluesQCIMPplaqueSE$Sample_Sex)),
text.col = c("#DB003F", "#1290D9"),
lty = 1, lwd = 1, col = c("#DB003F", "#1290D9"),
bty = "n")
mtext(paste0("Overall methylation density (plaque, ",SUBPROJECTNAME1,")"), outer = TRUE, cex = 1.5)
par(mfrow = c(1,1), oma = c(0,0,0,0))
dev.off()
pdf(paste0(QC_loc,"/",Today,".aems450k2.",EWAS_trait,".plaque.MethylationDensity.pdf"),
width = 12, height = 8, onefile = TRUE)
par(mfrow = c(1,2), oma = c(0, 0, 2, 0))
densityPlot(assays(aems450k2.BvaluesQCIMPplaqueSE)$data, sampGroups = aems450k2.BvaluesQCIMPplaqueSE$Sample_Sex, main = "Beta-values",
legend = FALSE,
xlab = "Beta-values",
pal = c("#DB003F", "#1290D9"),
bty = "n")
legend("topright", legend = levels(factor(aems450k2.BvaluesQCIMPplaqueSE$Sample_Sex)),
text.col = c("#DB003F", "#1290D9"),
lty = 1, lwd = 1, col = c("#DB003F", "#1290D9"),
bty = "n")
densityPlot(assays(aems450k2.MvaluesQCIMPplaqueSE)$data, sampGroups = aems450k2.MvaluesQCIMPplaqueSE$Sample_Sex, main = "M-values",
legend = FALSE,
xlab = "M-values",
pal = c("#DB003F", "#1290D9"),
bty = "n")
legend("topright", legend = levels(factor(aems450k2.MvaluesQCIMPplaqueSE$Sample_Sex)),
text.col = c("#DB003F", "#1290D9"),
lty = 1, lwd = 1, col = c("#DB003F", "#1290D9"),
bty = "n")
mtext(paste0("Overall methylation density (plaque, ",SUBPROJECTNAME2,")"), outer = TRUE, cex = 1.5)
par(mfrow = c(1,1), oma = c(0,0,0,0))
dev.off()
PROJECTDATASET = "AEMS450KMETA"
PROJECTNAME = "metasex"
KEYWORD = "SEX"
SUBPROJECTNAME1 = "AEMS450K1"
SUBPROJECTNAME2 = "AEMS450K2"
EWAS_trait = "Sample_Sex" # Phenotype
EWAS_trait_Hormones = "Sample_Sex_T_E2_Ratio" # Phenotype
AEDB = paste0(ROOT_loc, "/iCloud/Genomics/AE-AAA_GS_DBs")
INP_AE_loc = paste0(ROOT_loc, "/PLINK/_AE_Originals")
INP_AEMS450K1_loc = paste0(INP_AE_loc, "/AEMS450K1")
INP_AEMS450K2_loc = paste0(INP_AE_loc, "/AEMS450K2")
EPIGENETICS_loc = paste0(ROOT_loc, "/PLINK/analyses/epigenetics")
RES_AEMS450K1_loc = paste0(EPIGENETICS_loc, "/AEMS450K1")
RES_AEMS450K2_loc = paste0(EPIGENETICS_loc, "/AEMS450K2")
require(FDb.InfiniumMethylation.hg19)
feats <- features(FDb.InfiniumMethylation.hg19)
chr.list <- levels(seqnames(feats))
regions <- feats[seqnames(feats) %in% chr.list]
aems450k1.MvaluesQCplaqueClean <- aems450k1.MvaluesQCIMPplaqueSE
dim(aems450k1.MvaluesQCIMPplaqueSE)
metadata(aems450k1.MvaluesQCplaqueClean)$formula <- ~Sample_Sex + Age + Hospital
metadata(aems450k1.MvaluesQCplaqueClean)$formula_T_E2 <- ~Sample_Sex + Age + Hospital + T_E2
aems450k2.MvaluesQCplaqueClean <- aems450k2.MvaluesQCIMPplaqueSE
dim(aems450k2.MvaluesQCIMPplaqueSE)
metadata(aems450k2.MvaluesQCplaqueClean)$formula <- ~Sample_Sex + Age + Hospital
metadata(aems450k2.MvaluesQCplaqueClean)$formula_T_E2 <- ~Sample_Sex + Age + Hospital + T_E2
aems450k1.covariates <- get_all_vars(metadata(aems450k1.MvaluesQCplaqueClean)$formula,
data = colData(aems450k1.MvaluesQCplaqueClean))
aems450k1.nas <- apply(aems450k1.covariates, 1, anyNA)
aems450k1.MvaluesQCplaqueClean <- aems450k1.MvaluesQCplaqueClean[, !aems450k1.nas]
aems450k1.covariates_T_E2 <- get_all_vars(metadata(aems450k1.MvaluesQCplaqueClean)$formula_T_E2,
data = colData(aems450k1.MvaluesQCplaqueClean))
aems450k1.nas_T_E2 <- apply(aems450k1.covariates_T_E2, 1, anyNA)
aems450k1.MvaluesQCplaqueClean_T_E2 <- aems450k1.MvaluesQCplaqueClean[, !aems450k1.nas_T_E2]
dim(aems450k1.MvaluesQCplaqueClean_T_E2)
aems450k2.covariates <- get_all_vars(metadata(aems450k2.MvaluesQCplaqueClean)$formula,
data = colData(aems450k2.MvaluesQCplaqueClean))
aems450k2.nas <- apply(aems450k2.covariates, 1, anyNA)
aems450k2.MvaluesQCplaqueClean <- aems450k2.MvaluesQCplaqueClean[, !aems450k2.nas]
aems450k2.covariates_T_E2 <- get_all_vars(metadata(aems450k2.MvaluesQCplaqueClean)$formula_T_E2,
data = colData(aems450k2.MvaluesQCplaqueClean))
aems450k2.nas_T_E2 <- apply(aems450k2.covariates_T_E2, 1, anyNA)
aems450k2.MvaluesQCplaqueClean_T_E2 <- aems450k2.MvaluesQCplaqueClean[, !aems450k1.nas_T_E2]
aems450k2.covariates <- get_all_vars(metadata(aems450k2.MvaluesQCplaqueClean)$formula,
data = colData(aems450k2.MvaluesQCplaqueClean))
aems450k2.nas <- apply(aems450k2.covariates, 1, anyNA)
aems450k2.MvaluesQCplaqueClean <- aems450k2.MvaluesQCplaqueClean[, !aems450k2.nas]
dim(aems450k2.MvaluesQCplaqueClean)
aems450k2.covariates_T_E2 <- get_all_vars(metadata(aems450k2.MvaluesQCplaqueClean)$formula_T_E2,
data = colData(aems450k2.MvaluesQCplaqueClean))
aems450k2.nas_T_E2 <- apply(aems450k2.covariates_T_E2, 1, anyNA)
aems450k2.MvaluesQCplaqueClean_T_E2 <- aems450k2.MvaluesQCplaqueClean[, !aems450k1.nas_T_E2]
aems450k2.covariates <- get_all_vars(metadata(aems450k2.MvaluesQCplaqueClean)$formula,
data = colData(aems450k2.MvaluesQCplaqueClean))
aems450k2.nas <- apply(aems450k2.covariates, 1, anyNA)
aems450k2.MvaluesQCplaqueClean <- aems450k2.MvaluesQCplaqueClean[, !aems450k2.nas]
dim(aems450k2.MvaluesQCplaqueClean)
aems450k2.covariates_T_E2 <- get_all_vars(metadata(aems450k2.MvaluesQCplaqueClean)$formula_T_E2,
data = colData(aems450k2.MvaluesQCplaqueClean))
aems450k2.nas_T_E2 <- apply(aems450k2.covariates_T_E2, 1, anyNA)
aems450k2.MvaluesQCplaqueClean_T_E2 <- aems450k2.MvaluesQCplaqueClean[, !aems450k2.nas_T_E2]
dim(aems450k2.MvaluesQCplaqueClean)
aems450k1.covariates <- get_all_vars(metadata(aems450k1.MvaluesQCplaqueClean)$formula,
data = colData(aems450k1.MvaluesQCplaqueClean))
aems450k1.nas <- apply(aems450k1.covariates, 1, anyNA)
aems450k1.MvaluesQCplaqueClean <- aems450k1.MvaluesQCplaqueClean[, !aems450k1.nas]
dim(aems450k1.MvaluesQCplaqueClean)
aems450k1.covariates_T_E2 <- get_all_vars(metadata(aems450k1.MvaluesQCplaqueClean)$formula_T_E2,
data = colData(aems450k1.MvaluesQCplaqueClean))
aems450k1.nas_T_E2 <- apply(aems450k1.covariates_T_E2, 1, anyNA)
aems450k1.MvaluesQCplaqueClean_T_E2 <- aems450k1.MvaluesQCplaqueClean[, !aems450k1.nas_T_E2]
dim(aems450k1.MvaluesQCplaqueClean_T_E2)
aems450k1.MvaluesQCplaqueClean <- aems450k1.MvaluesQCplaqueClean[!(seqnames(aems450k1.MvaluesQCplaqueClean) %in% c("chrX","chrY")),]
aems450k1.MvaluesQCplaqueClean_T_E2 <- aems450k1.MvaluesQCplaqueClean_T_E2[!(seqnames(aems450k1.MvaluesQCplaqueClean_T_E2) %in% c("chrX","chrY")),]
aems450k2.MvaluesQCplaqueClean <- aems450k2.MvaluesQCplaqueClean[!(seqnames(aems450k2.MvaluesQCplaqueClean) %in% c("chrX","chrY")),]
aems450k2.MvaluesQCplaqueClean_T_E2 <- aems450k2.MvaluesQCplaqueClean_T_E2[!(seqnames(aems450k2.MvaluesQCplaqueClean_T_E2) %in% c("chrX","chrY")),]
data(hm450.manifest.pop.GoNL) ##From DNAmArray
#hm450.manifest.pop.GoNL
hm450.manifest.pop.GoNL <- hm450.manifest.pop.GoNL[!is.na(hm450.manifest.pop.GoNL$MASK.general.GoNL) &
hm450.manifest.pop.GoNL$MASK.general.GoNL == TRUE, ]
aems450k2.MvaluesQCplaqueClean <- aems450k2.MvaluesQCplaqueClean[!(names(aems450k2.MvaluesQCplaqueClean) %in% names(hm450.manifest.pop.GoNL)),]
aems450k2.MvaluesQCplaqueClean_T_E2 <- aems450k2.MvaluesQCplaqueClean_T_E2[!(names(aems450k2.MvaluesQCplaqueClean_T_E2) %in% names(hm450.manifest.pop.GoNL)),]
aems450k1.ranges <- unlist(names(rowRanges(aems450k1.MvaluesQCplaqueClean)))
aems450k2.ranges <- unlist(names(rowRanges(aems450k2.MvaluesQCplaqueClean)))
aems450k1.ranges_T_E2 <- unlist(names(rowRanges(aems450k1.MvaluesQCplaqueClean_T_E2)))
aems450k2.ranges_T_E2 <- unlist(names(rowRanges(aems450k2.MvaluesQCplaqueClean_T_E2)))
aems450k.meta.intersect <- intersect(aems450k1.ranges,aems450k2.ranges)
length(aems450k.meta.intersect) # 431,834
aems450k1.meta.difs <- setdiff(aems450k1.ranges,aems450k2.ranges)
length(aems450k1.meta.difs) # 264
aems450k.meta.intersect <- intersect(aems450k1.ranges,aems450k2.ranges)
aems450k.meta.intersect_T_E2 <- intersect(aems450k1.ranges_T_E2,aems450k2.ranges_T_E2)
length(aems450k.meta.intersect) # 431,834
length(aems450k.meta.intersect_T_E2) # 431,834
aems450k1.meta.difs <- setdiff(aems450k1.ranges,aems450k2.ranges)
aems450k1.meta.difs_T_E2 <- setdiff(aems450k1.ranges_T_E2,aems450k2.ranges_T_E2)
length(aems450k1.meta.difs) # 264
length(aems450k1.meta.difs_T_E2) # 264
aems450k2.meta.difs <- setdiff(aems450k2.ranges,aems450k1.ranges)
length(aems450k2.meta.difs) # 481
aems450k2.meta.difs_T_E2 <- setdiff(aems450k2.ranges_T_E2,aems450k1.ranges_T_E2)
length(aems450k2.meta.difs_T_E2) # 481
aems450k1.MvaluesQCplaqueClean <- aems450k1.MvaluesQCplaqueClean[(names(aems450k1.MvaluesQCplaqueClean) %in% aems450k.meta.intersect),]
aems450k2.MvaluesQCplaqueClean <- aems450k2.MvaluesQCplaqueClean[(names(aems450k2.MvaluesQCplaqueClean) %in% aems450k.meta.intersect),]
aems450k1.MvaluesQCplaqueClean_T_E2 <- aems450k1.MvaluesQCplaqueClean_T_E2[(names(aems450k1.MvaluesQCplaqueClean_T_E2) %in% aems450k.meta.intersect_T_E2),]
aems450k2.MvaluesQCplaqueClean_T_E2 <- aems450k2.MvaluesQCplaqueClean_T_E2[(names(aems450k2.MvaluesQCplaqueClean_T_E2) %in% aems450k.meta.intersect_T_E2),]
dim(aems450k1.MvaluesQCIMPplaqueSE)  # 483,731 CpGs, 485 samples
dim(aems450k2.MvaluesQCIMPplaqueSE)  # 484,249 CpGs, 190 samples
rowRanges(aems450k1.MvaluesQCplaqueClean)
rowRanges(aems450k1.MvaluesQCplaqueClean_T_E2)
dim(aems450k1.MvaluesQCIMPplaqueSE)  # 483,731 CpGs, 485 samples
dim(aems450k2.MvaluesQCIMPplaqueSE)  # 484,249 CpGs, 190 samples
rowRanges(aems450k1.MvaluesQCplaqueClean)
dim(aems450k1.MvaluesQCplaqueClean)  # 431,834 CpGs, 485 samples
dim(aems450k2.MvaluesQCplaqueClean)  # 431,834 CpGs, 190 samples
rowRanges(aems450k2.MvaluesQCplaqueClean)
dim(aems450k1.MvaluesQCplaqueClean_T_E2)  # 431,834 CpGs, 485 samples
dim(aems450k2.MvaluesQCplaqueClean_T_E2)  # 431,834 CpGs, 190 samples
rowRanges(aems450k2.MvaluesQCplaqueClean_T_E2)
install.packages.auto("limma")
cat(" - AEMS450K1 *with* hospital.")
aems450k1.designph <- model.matrix(metadata(aems450k1.MvaluesQCplaqueClean)$formula, data = colData(aems450k1.MvaluesQCplaqueClean))
aems450k1.dataph <- assays(aems450k1.MvaluesQCplaqueClean)$data
aems450k1.fitph <- limma::lmFit(aems450k1.dataph, aems450k1.designph)
